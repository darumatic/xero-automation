import os
import smtplib
from datetime import datetime
from email.header import Header
from email.message import EmailMessage
from email.mime.text import MIMEText
from email.utils import formataddr


class XeroEmailSender:
    @staticmethod
    def send_validation_report(result, local_now: datetime, errors=None):
        from_addr = os.environ["SENDER"]
        to_addr = os.environ["RECEIVER"]
        print("Sending validation report to: " + to_addr)
        password = os.environ["SENDGRID_API_KEY"]
        smtp_server = "smtp.sendgrid.net"
        username = "apikey"
        subject = f"Validation Report {local_now.strftime('%Y-%m-%d')}"

        if errors:
            errors = XeroEmailSender._format_errors(errors)

        msg = MIMEText(result + "\n" + errors, "plain", "utf-8")
        msg["Subject"] = Header(subject, "utf-8")
        msg["From"] = formataddr(
            (str(Header("Xero validation report", "utf-8")), "qq2841864141@gmail.com")
        )

        server = smtplib.SMTP(smtp_server, 587)
        server.set_debuglevel(1)
        server.login(username, password)
        try:
            server.sendmail(from_addr, [to_addr], msg.as_string())
            print("Validation email send succeed!")
        except Exception as e:
            print("Sending validation report failed! :")
            print(e)
        server.quit()
        print("*" * 80)

    @staticmethod
    def send_timesheet(
        attachment_paths: list, timesheet_month: datetime, mode: str, po=None
    ):
        """
        Sends the timesheet via email to $RECEIVER

        - `attachment_paths` is a list of paths to files to attach
        - `timesheet_month` is the month the timesheets are generated for. It assumes it's already in the local timezone
        - `mode` can be either `po` or `month`
        - `po` is the PO of the timesheet being generated and is only used when in `po` mode

        Based on https://www.codeitbro.com/send-email-using-python/
        """
        username = "apikey"
        password = os.environ["SENDGRID_API_KEY"]
        smtp_server = "smtp.sendgrid.net"

        message = EmailMessage()

        # Changes the subject and body depending on the mode
        email_subject = (
            f"Autogenerated Timesheet {timesheet_month.strftime('%B %Y')}"
            if mode == "month"
            else f"Autogenerated Timesheet PO {str(po)}"
        )
        email_body = (
            f"See attachments for autogenerated timesheets for {timesheet_month.strftime('%B %Y')}."
            if mode == "month"
            else f"See attachments for autogenerated timesheets for PO {str(po)} with end time set at {timesheet_month.strftime('%d %B %Y')}."
        )

        message["Subject"] = email_subject
        message["From"] = os.environ["SENDER"]
        message["To"] = os.environ["RECEIVER"]
        message.set_content(email_body)

        # Attach all the files in attachment_paths
        for file in attachment_paths:
            with open(file, "rb") as f:
                file_data = f.read()
                file_name = os.path.basename(f.name)

            message.add_attachment(
                file_data,
                maintype="application",
                subtype="octet-stream",
                filename=file_name,
            )

        print(f"Sending timesheet to {os.environ['RECEIVER']}")
        with smtplib.SMTP_SSL(smtp_server, 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print(f"Timesheet sent to {os.environ['RECEIVER']}")

    @staticmethod
    def send_budget_alerts(recipients: str, subject: str, message: str):
        """
        Send alerts generated from the budget spreadsheet.

        Based on https://www.codeitbro.com/send-email-using-python/
        """
        username = "apikey"
        password = os.environ["SENDGRID_API_KEY"]
        smtp_server = "smtp.sendgrid.net"

        message = EmailMessage()
        message["Subject"] = subject
        message["From"] = os.environ["SENDER"]
        message["To"] = recipients
        message.set_content(message)

        print(f"Sending spreadsheet alerts to {recipients} about {subject}")
        with smtplib.SMTP_SSL(smtp_server, 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print(f"Alerts about {subject} to {recipients} successfully sent")

    @staticmethod
    def _format_errors(errors):
        counter = 1
        error_str = ""
        for error in errors:
            if len(errors[error]) > 0:
                error_str += str(error) + ":\n"
            for item in errors[error]:
                if isinstance(item, str):
                    error_str += str(counter) + ". " + item + "\n"
                else:
                    error_str += str(counter) + ". " + str(item)[2:-1] + "\n"
                counter += 1
        return error_str
