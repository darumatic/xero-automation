import smtplib
import os
from email.mime.text import MIMEText
from email.header import Header
from email.utils import formataddr
from email.message import EmailMessage


class XeroEmailSender:
    @staticmethod
    def send_validation_report(result, errors=None):
        from_addr = os.environ["SENDER"]
        to_addr = os.environ["RECEIVER"]
        print("Sending validation report to: " + to_addr)
        password = os.environ["SENDGRID_API_KEY"]
        smtp_server = "smtp.sendgrid.net"
        username = "apikey"
        subject = "Monthly validation report"

        if errors:
            errors = XeroEmailSender._format_errors(errors)

        msg = MIMEText(result + "\n" + errors, "plain", "utf-8")
        msg["Subject"] = Header(subject, "utf-8")
        msg["From"] = formataddr(
            (str(Header("Xero validation report", "utf-8")), "qq2841864141@gmail.com")
        )

        server = smtplib.SMTP(smtp_server, 587)
        server.set_debuglevel(1)
        server.login(username, password)
        try:
            server.sendmail(from_addr, [to_addr], msg.as_string())
            print("Validation email send succeed!")
        except Exception as e:
            print("Sending validation report failed! :")
            print(e)
        server.quit()
        print("*" * 80)


    @staticmethod
    def send_timesheet(attachment_paths: list):
        """
        Sends the timesheet via email to $RECEIVER

        Based on https://www.codeitbro.com/send-email-using-python/
        """
        username = "apikey"
        password = os.environ["SENDGRID_API_KEY"]
        smtp_server = "smtp.sendgrid.net"

        message = EmailMessage()
        message["Subject"] = "Autogenerated Timesheet"
        message["From"] = os.environ["SENDER"]
        message["To"] = os.environ["RECEIVER"]
        message.set_content("See attachments")

        # Attach all the files in attachment_paths
        for file in attachment_paths:
            with open(file, "rb") as f:
                file_data = f.read()
                file_name = f.name

            message.add_attachment(
                file_data,
                maintype="application",
                subtype="octet-stream",
                filename=file_name,
            )

        print(f"Sending timesheet to {os.environ['RECEIVER']}")
        with smtplib.SMTP_SSL(smtp_server, 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print(f"Timesheet sent to {os.environ['RECEIVER']}")


    @staticmethod
    def _format_errors(errors):
        counter = 1
        error_str = ""
        for error in errors:
            if len(errors[error]) > 0:
                error_str += str(error) + ":\n"
            for item in errors[error]:
                if isinstance(item, str):
                    error_str += str(counter) + ". " + item + "\n"
                else:
                    error_str += str(counter) + ". " + str(item)[2:-1] + "\n"
                counter += 1
        return error_str
